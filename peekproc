#! /usr/bin/python

import sys
from time import sleep, time
import psutil
import argparse


pids  = list()
procs = dict()

attrs = None
env   = None

startTime = time()


def printProc(proc):
	cmdline = None
	attrsVal = None
	envVal = None

	try:
		cmdline = proc.cmdline()
	except psutil.AccessDenied:
		pass

	try:
		if attrs != None:
			attrsVal = proc.as_dict(attrs)
	except psutil.AccessDenied:
		pass

	try:
		if vars != None:
			envVal = proc.environ()
	except psutil.AccessDenied:
		pass

	print '%8.3f: %6i  %s' % (time()-startTime, proc.pid, ' '.join(cmdline))

	if (attrs != None) and (attrsVal != None):
		for name, val in attrsVal.iteritems():
			print '\t- %-12s "%s"' % (name + ':', val)

	if (env != None) and (envVal != None):
		for name in env:
			if name in envVal:
				print '\t- $%-11s "%s"' % (name + ':', envVal[name])

	if (attrs != None) or (env != None):
		print ''


def updateProc(proc):
	try:
		if (proc.pid not in procs) or (proc.cmdline != procs[proc.pid].cmdline):
			printProc(proc)
		procs[proc.pid] = proc

		childs = proc.children(recursive=True)
		for child in childs:
			updateProc(child)

	except (psutil.NoSuchProcess, psutil.AccessDenied) as ex:
		if ex.pid in procs:
			del procs[ex.pid]


def update():
	for pid in pids:
		try:
			proc = psutil.Process(pid)
			updateProc(proc)
		except psutil.NoSuchProcess:
			if pid in procs:
				del procs[pid]

	# remove processes that has terminated
	curPids = psutil.pids()
	pidsToRemove = list()

	for pid in procs:
		if pid not in curPids:
			pidsToRemove.append(pid)

	for pid in pidsToRemove:
		del procs[pid]


if __name__ == "__main__":
	parser = argparse.ArgumentParser()

	parser.add_argument('PID', type=int, nargs='+',
			help='processes to peek at')

	parser.add_argument('-n', '--interval', type=float, default=0.2,
			help='update interval in seconds, default is 0.2')

	parser.add_argument('-a', '--attrs', nargs='+',
			help='extra attributes to read')

	parser.add_argument('-e', '--env', nargs='+',
			help=' environment variables to read')

	args = parser.parse_args()

	pids = args.PID
	interval = args.interval
	attrs = args.attrs
	env = args.env

	try:
		while True:
			update()
			sleep(interval)

	except KeyboardInterrupt:
		pass

