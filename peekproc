#!/usr/bin/env python

import sys
from time import sleep, time
import psutil
import argparse


pids  = list()
procs = dict()

attrs = None
env   = None

formatStr = '{time:.3f}: {pid:6}  {cmd}'

startTime = time()


def printVals(names, vals, prefix=''):
	for name in names:
		if name in vals:
			val = vals[name]
			if val != None:
				if type(val) == str:
					val = '\'' + val + '\''
				print('    {:<12} {}'.format(prefix+name+':', val))


def printProc(proc, cmdline):
	try:
		timestamp = time() - startTime
		procInfo = proc.as_dict(['name', 'exe', 'ppid', 'cwd', 'username'])
		print(formatStr.format( \
				time = timestamp, \
				pid = proc.pid, \
				cmd = ' '.join(cmdline), \
				name = procInfo['name'], \
				exe = procInfo['exe'], \
				ppid = procInfo['ppid'], \
				cwd = procInfo['cwd'], \
				username = procInfo['username'] ))
	except KeyError as ex:
		print('unknown format key "' + ex.args[0] + '"')
		sys.exit(1)
	except psutil.AccessDenied:
		pass

	try:
		if attrs != None:
			printVals(attrs, proc.as_dict(attrs))
		if env != None:
			printVals(env, proc.environ(), prefix='$')
	except AttributeError as ex:
		print(ex.args[0])
		sys.exit(1)
	except psutil.AccessDenied:
		pass

		try:
			vals = proc.environ()
		except psutil.AccessDenied:
			pass

	if (attrs != None) or (env != None):
		print('')


def updateProc(proc):
	try:
		cmdline = proc.cmdline()
		if (proc.pid not in procs) or (cmdline != procs[proc.pid]):
			printProc(proc, cmdline)
		procs[proc.pid] = cmdline

		childs = proc.children(recursive=True)
		for child in childs:
			updateProc(child)

	except (psutil.NoSuchProcess, psutil.AccessDenied) as ex:
		if ex.pid in procs:
			del procs[ex.pid]


def update():
	for pid in pids:
		try:
			proc = psutil.Process(pid)
			updateProc(proc)
		except psutil.NoSuchProcess:
			if pid in procs:
				del procs[pid]

	# remove processes that has terminated
	pidsToRemove = list()

	for pid in procs:
		if not psutil.pid_exists(pid):
			pidsToRemove.append(pid)

	for pid in pidsToRemove:
		del procs[pid]


if __name__ == "__main__":
	parser = argparse.ArgumentParser()

	parser.add_argument('PID', type=int, nargs='+',
			help='processes to peek at')

	parser.add_argument('-n', '--interval', type=float, default=0.2,
			help='update interval in seconds, default is 0.2')

	parser.add_argument('-q', '--quick', action='store_true',
			help='run without delay between scans')

	parser.add_argument('-s', '--single', action='store_true',
			help='single pass, scan process tree once and exit');

	parser.add_argument('-a', '--attrs', nargs='+',
			help='extra attributes to read, available fields are: ppid, ' + \
					'name, exe, cmdline, environ, create_time, status, ' + \
					'cwd, username, uids, gids, terminal, nice, ionice, ' + \
					'rlimit, io_counters, num_ctx_switches, num_fds, ' + \
					'num_handles, num_threads, threads, cpu_times, ' + \
					'cpu_percent, cpu_affinity, memory_info, ' + \
					'memory_full_info, memory_percent, memory_maps, ' + \
					'open_files, connections, is_running')

	parser.add_argument('-e', '--env', nargs='+',
			help=' environment variables to read')

	parser.add_argument('-f', '--format', type=str, default=formatStr,
			help='output format string, available fields are: timestamp, ' + \
					'pid, cmd, name, exe, ppid, cwd, username; default is "' + \
					formatStr + '"')

	args = parser.parse_args()

	pids = args.PID
	interval = args.interval
	if args.quick:
		interval = 0

	attrs = args.attrs
	env = args.env
	formatStr = args.format
	singlePass = args.single

	try:
		while True:
			update()

			if singlePass:
				break

			if interval > 0:
				sleep(interval)

	except KeyboardInterrupt:
		pass

